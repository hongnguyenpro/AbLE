{"name":"AbLE","tagline":"Annotation-based Layout Engine (AbLE)","body":"## Annotation-based Layout Engine (AbLE) \r\n\r\nAbLE is a layout engine for the `Android` platform that allows \r\ndevelopers to write layouts using `Java` code and `XML` interchangeably.\r\n\r\n----------------------------------\r\n\r\n## The Basics\r\n\r\nThere are 9 annotations that are currently used: *Layout*, *LayoutAdapter*, *XMLLayout*,\r\n*Invisible*, *Binding*, *Variable*, *Embed*, *Setter* and *Getter*.\r\n\r\n- __@Layout__ is used to create existing Android `View` classes in the layout. \r\n- __@LayoutAdapter__ works by providing a callback to get a view from a custom class. \r\n- __@Invisible__ defines something that is not a view. \r\n- __@Variable__ declares an Object that is ignored by the layout system, but that\r\nnon-variables can use. `Variables` can be handy for things that need to be modified before assigned.\r\nThese modifications can happen in a *static block*. \r\n- __@Binding__ is generally unused, but can be used to assign an Object to a `@Variable`, if it exists.\r\n- __@Embed__ allows a layout class to be included in another layout as a child view. \r\n- **@Setter** can be used to set values that either have multiple parameters or none. \r\n- __@Getter__ can be used to get an Object using any number of parameters during class layout.\r\n\r\nThere is also a `View` Object called *AbLE_Annotation*. This can be set in `XML` and, using custom `XML` parameters, can point to an annotated layout file to be handled by AbLE. This class is currently in beta, and should not be relied on as-is.\r\n\r\nThe benefits of using a code-based layout system include the ability to declare types and parameters\r\nprogrammatically, and use complex types (any Object).\r\n\r\nThere are downsides as well. For example, there is no validation of attributes. It is also not\r\ndirectly cross-platform compatible, but it requires less set up in Android than an XML-based architecture.\r\n\r\n## A little more\r\n\r\nThe layout inflater recursively creates all the layouts and set their attributes using reflection. Other features that improve speed of coding include the ability to define the layout file in activity `meta-data`.\r\n\r\nCurrently available `meta-data` tags are as follows:\r\n\r\nAt the **Application** level:\r\n* __contentSize__: Specifies a down-scaled pixel width and height in the format *WxH*. `x` __MUST__ be lower-case, and `W` and `H` __MUST__ be `integer` values.\r\n* __background__: Specifies the background image or color that should be set behind the shrunken screen.\r\nThis is only used if `contentSize` is set. To use a background resource, set the\r\n`android:resource` attribute. Otherwise, if a `String` is used, use a color, such as \"red\" or \"blue\".\r\nA hex color should be preceded with an escape character (\"\\\"). See [Stack Overflow](http://stackoverflow.com/questions/14692335/specify-hex-color-value-in-android-metadata).\r\n\r\nAt the **Activity** level:\r\n* __layout__: Specifies the class that contains the layout file to inflate for the Activity.\r\n\r\nFinally, there are many useful functions for logging, debugging, and gathering information about the device and screen size available in both the `AbLEActivity` and `AbLEUtil` classes.\r\n\r\nMuch more detailed information is included in the *javadocs*, and a simple example is provided as a test project.\r\n\r\n----------------------------------\r\n\r\n## LICENSE\r\n\r\nCopyright 2013 Phil Brown\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nThe license text is printed below, and you may obtain a copy of \r\nthe License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License (online or below) for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n----------------------------------\r\n\r\nFor the redistribution section of the license, there is a Java annotation\r\navailable on GitHub (and already within AbLE) that is meant for annotating \r\nchanges to source code.\r\n\r\nFeel free to use this for annotating changes to AbLE. You can find this \r\ncode at https://github.com/phil-brown/Modified or in the model package.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}